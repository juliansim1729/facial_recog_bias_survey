summary(lm.fit)
# Section 3.6.2 Chunk #3
names(lm.fit)
coef(lm.fit)
# Section 3.6.2 Chunk #4
confint(lm.fit)
# Section 3.6.2 Chunk #5
predict(lm.fit , data.frame(lstat = (c(5, 10, 15))), interval = "confidence")
predict(lm.fit , data.frame(lstat = (c(5, 10, 15))), interval = "prediction")
# Section 3.6.2 Chunk #6
plot(lstat, medv)
abline(lm.fit)
# Section 3.6.2 Chunk #7
plot(lstat, medv)
abline(lm.fit)
abline(lm.fit , lwd = 3)
abline(lm.fit , lwd = 3, col = "red")
plot(lstat , medv , col = "red")
plot(lstat , medv , pch = 20)
plot(lstat , medv , pch = "+")
plot (1:20 , 1:20, pch = 1:20)
# Section 3.6.2 Chunk #8
par(mfrow = c(2, 2))
plot(lm.fit)
# Section 3.6.2 Chunk #9
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
# Section 3.6.2 Chunk #10
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
data("Auto")
rm(list = ls())
library(ggplot2)
library(factoextra)
library(mclust)
data("Auto")
rm(list = ls())
library(ggplot2)
data("Auto")
data("Auto")
attach(auto)
data("Auto")
attach(Auto)
auto_fit <- lm(mpg ~ horsepower)
auto_fit <- lm(mpg ~ horsepower)
summary(auto_fit)
predict(auto_fit, horsepower = 98)
predict(auto_fit, data.frame(horsepower = 98))
predict(auto_fit, data.frame(horsepower = 98))
predict(auto_fit, data.frame(horsepower = 98), interval = "confidence")
predict(auto_fit, data.frame(horsepower = 98), interval = "prediction")
predict(auto_fit, data.frame(horsepower = 98), interval = "confidence")
predict(auto_fit, data.frame(horsepower = 98), interval = "prediction")
plot(horsepower, mpg)
plot(horsepower, mpg)
abline(auto_fit)
par(mfrow = c(2, 2))
plot(lm.fit)
rm(list = ls())
library(ggplot2)
data("Auto")
attach(Auto)
auto_fit <- lm(mpg ~ horsepower)
summary(auto_fit)
predict(auto_fit, data.frame(horsepower = 98), interval = "confidence")
predict(auto_fit, data.frame(horsepower = 98), interval = "prediction")
plot(horsepower, mpg)
abline(auto_fit)
par(mfrow = c(2, 2))
plot(auto_fit)
set.seed(1)
x <- rnorm(100)
y <- 2 * x + rnorm(100)
lm_fit <- lm(y ~ x, intercept = FALSE)
lm_fit <- lm(y ~ x + 0)
lm_fit <- lm(y ~ x + 0)
summary(lm_fit)
# rm(list = ls())
library(tidyverse)
library(Lahman)
library(reshape2)
library(mdsr)
library(mvtnorm)
library(factoextra)
library(cluster)
library(leaps)
library(caret)
library(ISLR2)
library(ggrepel)
FullStats <- read.csv("FullStats.csv")
FullStats <-
FullStats %>%
rename(deathsper100000 = Deaths...cumulative.total.per.100000.population, casesper100000 = Cases...cumulative.total.per.100000.population)
head(FullStats)
VaccineData <- read.csv("vaccination-data.csv")
FullStats$gdpcap <- FullStats$gdpcap/1000
FullStats$AirTransport <- FullStats$AirTransport/1000
FullStats$HealthExppCap <- FullStats$HealthExppCap/100
FullStats %>%
group_by(WHO.Region) %>%
summarise(countries = n(), avgcovidcases = mean(totalcases), avgcoviddeaths = mean(totaldeaths), deathrate = (avgcoviddeaths/avgcovidcases))
FullStats %>%
ggplot(aes(x = (gdpcap), y = deathrate, na.rm = TRUE)) +
geom_point(aes(color = WHO.Region))
FullStats %>%
ggplot(aes(x = (urbpop), y = deathrate, na.rm = TRUE)) +
geom_point(aes(color = WHO.Region))
is_outlier <- function(x) {
return(x < quantile(x, 0.25, na.rm = TRUE) - 1.5 * IQR(x, na.rm = TRUE) |
x > quantile(x, 0.75, na.rm = TRUE) + 1.5 * IQR(x, na.rm = TRUE))
}
temp <- FullStats %>%
group_by(WHO.Region) %>%
mutate(outlier = if_else(is_outlier(deathrate), Name, NA_character_),
outlierBin = is_outlier(deathrate))
# main graph
ggplot(data = temp, aes(x = factor(WHO.Region), y = deathrate,
fill = factor(WHO.Region))) +
geom_boxplot(aes(color = factor(WHO.Region)), show.legend = FALSE) +
geom_boxplot(outlier.color = NA) +
geom_text_repel(aes(label = outlier), nudge_y = 0.01, na.rm = TRUE,
show.legend = FALSE,) +
theme(
# label stylings
axis.text.x = element_text(angle = 30, vjust = 1, hjust = 1),
plot.title = element_text(size = 15, face = "bold", hjust = 0.5)) +
theme(
# legend stylings
legend.position = c(0.975, 0.95),
legend.justification = c("right", "top"),
legend.box.background = element_rect(color = "black")) +
labs(title = "Death Rate across WHO Regions",
x = "Region", y = "Death Rate",
fill = "Region")
# All Variables Highly Significant - 6 Variables
deathrate.fit <- lm(data = FullStats, deathsper100000 ~ urbpop + AgeDependancy + HospitalBeds  + gdpcap:PovertyRate + urbpop:HospitalBeds + PovertyRate:HospitalBeds + 0 , na.rm = TRUE)
summary(deathrate.fit)
AIC(deathrate.fit)
# 34
deathrate.fit <- lm(data = FullStats, deathsper100000 ~ gdpcap + urbpop  + AirTransport + AgeDependancy + MilitaryEx + HospitalBeds + PovertyRate + HealthExppCap  + urbpop:AgeDependancy + gdpcap:PovertyRate + urbpop:HospitalBeds + PovertyRate:HospitalBeds + AirTransport:gdpcap + 0 , na.rm = TRUE)
summary(deathrate.fit)
AIC(deathrate.fit)
library(leaps)
regfit.full = regsubsets(deathsper100000 ~ gdpcap + urbpop  + AirTransport + AgeDependancy + MilitaryEx + HospitalBeds + PovertyRate + HealthExppCap  + urbpop:AgeDependancy + gdpcap:PovertyRate + urbpop:HospitalBeds + PovertyRate:HospitalBeds + PovertyRate:urbpop + gdpcap:HospitalBeds + AgeDependancy:gdpcap + AgeDependancy:PovertyRate + AirTransport:gdpcap + 0 , data = FullStats,  nvmax = 16, method="exhaustive")
summary(regfit.full)
reg.summary <- summary(regfit.full) #get the summary
par(mfrow=c(2,2))
#rss plot - useful
plot(reg.summary$rss ,xlab="Number of Variables ",ylab="RSS",type="l")
#adjr2 plot
plot(reg.summary$adjr2 ,xlab="Number of Variables ", ylab="Adjusted RSq",type="l")
max_adjr2 <- which.max(reg.summary$adjr2)
points(max_adjr2,reg.summary$adjr2[max_adjr2], col="red",cex=2,pch=20)
# AIC criterion (Cp)
plot(reg.summary$cp ,xlab="Number of Variables ",ylab="Cp", type='l')
min_cp <- which.min(reg.summary$cp )
points(min_cp, reg.summary$cp[min_cp],col="red",cex=2,pch=20)
# BIC criterion
plot(reg.summary$bic ,xlab="Number of Variables ",ylab="BIC",type='l')
min_bic <- which.min(reg.summary$bic)
points(min_bic,reg.summary$bic[min_bic],col="red",cex=2,pch=20)
par(mfrow = c(2,2))
plot(deathrate.fit)
# Case Rate - All Vars
caserate.fit <- lm(data = FullStatsNA, casesper100000 ~  gdpcap + urbpop + HealthExppCap + AirTransport + AgeDependancy + MilitaryEx + HospitalBeds + PovertyRate, na.rm = TRUE)
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)
worldmap <- map_data("world")
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)
library(tidyverse)
library(Lahman)
library(reshape2)
library(mdsr)
library(mvtnorm)
library(factoextra)
library(cluster)
library(leaps)
library(caret)
library(ISLR2)
library(ggrepel)
library(maps)
install.packages("maps")
library(tidyverse)
library(Lahman)
library(reshape2)
library(mdsr)
library(mvtnorm)
library(factoextra)
library(cluster)
library(leaps)
library(caret)
library(ISLR2)
library(ggrepel)
library(maps)
worldmap <- map_data("world")
ggplot() +
geom_map(
data = world, map = world,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)
worldmap <- map_data("world")
ggplot() +
geom_map(
data = worldmap, map = worldmap,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.1
)
worldmap <- map_data("world")
ggplot() +
geom_map(
data = worldmap, map = worldmap,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.05
)
View(FullStats)
View(worldmap)
worldmap <- worldmap %>%
left_join(by = c("region" = "Name"))
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name"))
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name")) %>%
select(long, lat, group, order, region, subregion, deathsper10000)
# rm(list = ls())
library(tidyverse)
library(Lahman)
library(reshape2)
library(mdsr)
library(mvtnorm)
library(factoextra)
library(cluster)
library(leaps)
library(caret)
library(ISLR2)
library(ggrepel)
library(maps)
FullStats <- read.csv("FullStats.csv")
FullStats <-
FullStats %>%
rename(deathsper100000 = Deaths...cumulative.total.per.100000.population, casesper100000 = Cases...cumulative.total.per.100000.population)
head(FullStats)
VaccineData <- read.csv("vaccination-data.csv")
FullStats$gdpcap <- FullStats$gdpcap/1000
FullStats$AirTransport <- FullStats$AirTransport/1000
FullStats$HealthExppCap <- FullStats$HealthExppCap/100
FullStats %>%
group_by(WHO.Region) %>%
summarise(countries = n(), avgcovidcases = mean(totalcases), avgcoviddeaths = mean(totaldeaths), deathrate = (avgcoviddeaths/avgcovidcases))
FullStats %>%
ggplot(aes(x = (gdpcap), y = deathrate, na.rm = TRUE)) +
geom_point(aes(color = WHO.Region))
FullStats %>%
ggplot(aes(x = (urbpop), y = deathrate, na.rm = TRUE)) +
geom_point(aes(color = WHO.Region))
is_outlier <- function(x) {
return(x < quantile(x, 0.25, na.rm = TRUE) - 1.5 * IQR(x, na.rm = TRUE) |
x > quantile(x, 0.75, na.rm = TRUE) + 1.5 * IQR(x, na.rm = TRUE))
}
temp <- FullStats %>%
group_by(WHO.Region) %>%
mutate(outlier = if_else(is_outlier(deathrate), Name, NA_character_),
outlierBin = is_outlier(deathrate))
# main graph
ggplot(data = temp, aes(x = factor(WHO.Region), y = deathrate,
fill = factor(WHO.Region))) +
geom_boxplot(aes(color = factor(WHO.Region)), show.legend = FALSE) +
geom_boxplot(outlier.color = NA) +
geom_text_repel(aes(label = outlier), nudge_y = 0.01, na.rm = TRUE,
show.legend = FALSE,) +
theme(
# label stylings
axis.text.x = element_text(angle = 30, vjust = 1, hjust = 1),
plot.title = element_text(size = 15, face = "bold", hjust = 0.5)) +
theme(
# legend stylings
legend.position = c(0.975, 0.95),
legend.justification = c("right", "top"),
legend.box.background = element_rect(color = "black")) +
labs(title = "Death Rate across WHO Regions",
x = "Region", y = "Death Rate",
fill = "Region")
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name")) %>%
select(long, lat, group, order, region, subregion, deathsper10000)
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name")) %>%
select(long, lat, group, order, region, subregion, deathsper100000)
worldmap <- mutate(worldmap, mapfill = deathsper100000)
ggplot() +
geom_map(
data = worldmap, map = worldmap,
aes(long, lat, map_id = region),
color = "black", fill = "lightgray", size = 0.05)
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name")) %>%
select(long, lat, group, order, region, subregion, deathsper100000)
ggplot(data = worldmap, aes(x = long, y = lat, fill = deathsper100000, group = group) +
geom_polygon(color = "gray") + ggtitle("Deaths per 100,000 Around The World") +
scale_fill_identity()
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name")) %>%
select(long, lat, group, order, region, subregion, deathsper100000)
ggplot(data = worldmap, aes(x = long, y = lat, fill = deathsper100000, group = group)) +
geom_polygon(color = "gray") + ggtitle("Deaths per 100,000 Around The World") +
scale_fill_identity()
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name")) %>%
select(long, lat, group, order, region, subregion, deathsper100000)
ggplot(data = worldmap, aes(x = long, y = lat, fill = deathsper100000 + 1, group = group)) +
geom_polygon(color = "gray") + ggtitle("Deaths per 100,000 Around The World") +
scale_fill_identity()
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name")) %>%
select(long, lat, group, order, region, subregion, deathsper100000)
ggplot(data = worldmap, aes(x = long, y = lat, fill = deathsper100000 + 1, group = group)) +
geom_polygon(color = "gray") + ggtitle("Deaths per 100,000 Around The World")
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name")) %>%
select(long, lat, group, order, region, subregion, deathsper100000)
ggplot(data = worldmap, aes(x = long, y = lat, fill = deathsper100000 + 1, group = group)) +
geom_polygon(color = "gray") + ggtitle("Deaths per 100,000 Around The World") +
scale_color_distiller("Air Temperature", palette = "Spectral")
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name")) %>%
select(long, lat, group, order, region, subregion, deathsper100000)
ggplot(data = worldmap, aes(x = long, y = lat, fill = deathsper100000 + 1, group = group)) +
geom_polygon(color = "gray") + ggtitle("Deaths per 100,000 Around The World") +
scale_color_distiller(palette = "Spectral")
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name")) %>%
select(long, lat, group, order, region, subregion, deathsper100000)
ggplot(data = worldmap, aes(x = long, y = lat, fill = deathsper100000 + 1, group = group)) +
geom_polygon(color = "gray") + ggtitle("Deaths per 100,000 Around The World") +
scale_fill_continuous(low = "grey", high = "blue", space = "Lab", name = "g = 1")
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name")) %>%
select(long, lat, group, order, region, subregion, deathsper100000)
ggplot(data = worldmap, aes(x = long, y = lat, fill = deathsper100000 + 1, group = group)) +
geom_polygon(color = "gray") + ggtitle("Deaths per 100,000 Around The World") +
scale_fill_continuous(low = "grey", high = "blue", space = "Lab")
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name")) %>%
select(long, lat, group, order, region, subregion, deathsper100000)
ggplot(data = worldmap, aes(x = long, y = lat, fill = deathsper100000 + 1, group = group)) +
geom_polygon(color = "gray") + ggtitle("Deaths per 100,000 Around The World") +
scale_fill_continuous(low = "red", high = "blue", space = "Lab")
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name")) %>%
select(long, lat, group, order, region, subregion, deathsper100000)
ggplot(data = worldmap, aes(x = long, y = lat, fill = deathsper100000 + 1, group = group)) +
geom_polygon(color = "gray") + ggtitle("Deaths per 100,000 Around The World") +
scale_fill_continuous(low = "", high = "blue", space = "Lab", type = "viridis")
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name")) %>%
select(long, lat, group, order, region, subregion, deathsper100000)
ggplot(data = worldmap, aes(x = long, y = lat, fill = deathsper100000 + 1, group = group)) +
geom_polygon(color = "gray") + ggtitle("Deaths per 100,000 Around The World") +
scale_fill_continuous(low = "gray", high = "blue", space = "Lab", type = "viridis")
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name")) %>%
select(long, lat, group, order, region, subregion, deathsper100000)
ggplot(data = worldmap, aes(x = long, y = lat, fill = deathsper100000 + 1, group = group)) +
geom_polygon(color = "gray") + ggtitle("Deaths per 100,000 Around The World") +
scale_fill_continuous(type = "viridis")
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name"))
ggplot(data = worldmap, aes(x = long, y = lat, fill = deathsper100000 + 1, group = group)) +
geom_polygon(color = "gray") + ggtitle("Deaths per 100,000 Around The World") +
scale_fill_continuous(type = "viridis")
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name"))
ggplot(data = worldmap, aes(x = long, y = lat, fill = deathsper100000 + 1, group = group)) +
geom_polygon(color = "gray") + ggtitle("Deaths per 100,000 Around The World") +
scale_fill_continuous(type = "viridis")
ggplot(data = worldmap, aes(x = long, y = lat, fill = HospitalBeds + 1, group = group)) +
geom_polygon(color = "gray") + ggtitle("Hospital Beds Around The World") +
scale_fill_continuous(type = "viridis")
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name"))
# This is super adjustable for whatever variable you'd like to put in
ggplot(data = worldmap, aes(x = long, y = lat, fill = deathsper100000 + 1, group = group)) +
geom_polygon(color = "gray") + ggtitle("Deaths per 100,000 Around The World") +
scale_fill_continuous(type = "viridis")
ggplot(data = worldmap, aes(x = long, y = lat, fill = HospitalBeds + 1, group = group)) +
geom_polygon(color = "gray") +
scale_fill_continuous(type = "viridis") +
labs(title = "Hospital Beds across the World",
x = "Longitude", y = "Latitude",
fill = "Hospital Bed counts")
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name"))
# This is super adjustable for whatever variable you'd like to put in
ggplot(data = worldmap, aes(x = long, y = lat, fill = deathsper100000 + 1, group = group)) +
geom_polygon(color = "gray") + ggtitle("Deaths per 100,000 Around The World") +
scale_fill_continuous(type = "viridis")
ggplot(data = worldmap, aes(x = long, y = lat, fill = HospitalBeds + 1, group = group)) +
geom_polygon(color = "gray") +
scale_fill_continuous(type = "viridis") +
labs(title = "Hospital Beds across the World",
x = "Longitude", y = "Latitude",
fill = "Hospital Bed Counts")
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name"))
# This is super adjustable for whatever variable you'd like to put in
ggplot(data = worldmap, aes(x = long, y = lat, fill = deathsper100000 + 1, group = group)) +
geom_polygon(color = "gray") + ggtitle("Deaths per 100,000 Around The World") +
scale_fill_continuous(type = "viridis")
ggplot(data = worldmap, aes(x = long, y = lat, fill = HospitalBeds + 1, group = group)) +
geom_polygon(color = "gray") +
scale_fill_continuous(type = "viridis") +
labs(title = "Hospital Beds across the World",
x = "Longitude", y = "Latitude",
fill = "Hospital Bed \m Counts")
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name"))
# This is super adjustable for whatever variable you'd like to put in
ggplot(data = worldmap, aes(x = long, y = lat, fill = deathsper100000 + 1, group = group)) +
geom_polygon(color = "gray") + ggtitle("Deaths per 100,000 Around The World") +
scale_fill_continuous(type = "viridis")
ggplot(data = worldmap, aes(x = long, y = lat, fill = HospitalBeds + 1, group = group)) +
geom_polygon(color = "gray") +
scale_fill_continuous(type = "viridis") +
labs(title = "Hospital Beds across the World",
x = "Longitude", y = "Latitude",
fill = "Hospital Bed \n Counts")
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name"))
# This is super adjustable for whatever variable you'd like to put in
ggplot(data = worldmap, aes(x = long, y = lat, fill = deathsper100000 + 1, group = group)) +
geom_polygon(color = "gray") + ggtitle("Deaths per 100,000 Around The World") +
scale_fill_continuous(type = "viridis")
ggplot(data = worldmap, aes(x = long, y = lat, fill = HospitalBeds + 1, group = group)) +
geom_polygon(color = "gray") +
scale_fill_continuous(type = "viridis") +
labs(title = "Hospital Beds across the World",
x = "Longitude", y = "Latitude",
fill = "Hospital\nBed\nCounts")
worldmap <- map_data("world")
worldmap <- worldmap %>%
left_join(FullStats, by = c("region" = "Name"))
# This is super adjustable for whatever variable you'd like to put in
# make sure to adjust the labels, \n to avoid squashing the plot
ggplot(data = worldmap, aes(x = long, y = lat, fill = deathsper100000 + 1, group = group)) +
geom_polygon(color = "gray") + ggtitle("Deaths per 100,000 Around The World") +
scale_fill_continuous(type = "viridis") +
labs(title = "Death Rates across the World",
x = "Longitude", y = "Latitude",
fill = "Death\nRates") # escaping new lines
ggplot(data = worldmap, aes(x = long, y = lat, fill = HospitalBeds + 1, group = group)) +
geom_polygon(color = "gray") +
scale_fill_continuous(type = "viridis") +
labs(title = "Hospital Beds across the World",
x = "Longitude", y = "Latitude",
fill = "Hospital\nBed\nCounts") # escaping new lines
library(readr)
library(readr)
library(ggplot)
library(readr)
library(ggplot2)
# environment setup
rm(list = ls())
cd
cd()
# set working directory
setwd("/Documents")
# set working directory
setwd("/Documents")
# set working directory
setwd("/ds440")
# set working directory
setwd("~/ds440")
# set working directory
setwd("~/")
getwd()
# set working directory
setwd("C:/Users/Julian/ds440/FairFace/")
groundtruth <- read_csv("groundtruth.csv")
View(groundtruth)
groundtruth <- read_csv("groundtruth.csv")
groundtruth <- read_csv("groundtruth.csv")
